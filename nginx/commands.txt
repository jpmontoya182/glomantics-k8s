- Use openssl to create cer and key files
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout id-local.key -out id-local.crt -config id-local.conf -passin pass:YourStrongPassword
- Export a pfx that you can import / trust
openssl pkcs12 -export -out id-local.pfx -inkey id-local.key -in id-local.crt

----------------

- Use openssl to create cer and key files
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout www-local.key -out www-local.crt -config www-local.conf -passin pass:YourStrongPassword
- Export a pfx that you can import / trust
openssl pkcs12 -export -out www-local.pfx -inkey www-local.key -in www-local.crt

----------------
docker pull mcr.microsoft.com/mssql/server
docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=yourStrong(!)Password" -p 1434:1433 -d mcr.microsoft.com/mssql/server
----------------
-- save image on local repositoey of docker, after fill data on the database (sql/InitializeGlobomanticsDb.sql) 
docker commit -m "Added Globomantics User db and login" -a "jpmontoya182" hopeful_montalcini jpmontoya182/globomantics_database:latest
----------------
--- access to kubernetes
--  Create Token 
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.1.0/aio/deploy/recommended.yaml
kubectl apply -f k8s/local-dashboard-account.yml
kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | sls admin-user | ForEach-Object { $_ -Split '\s+' } | Select -First 1)
start kubectl proxy
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
kubectl get all 

-- install the community nginx ingress controller (https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/)
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.43.0/deploy/static/provider/cloud/deploy.yaml



-- execution order on kubernetes
kubectl apply -f k8s/globoseq.yml
kubectl apply -f k8s/globosmtp.yml
kubectl apply -f k8s/globosql.yml

kubectl get all

kubectl apply -f k8s/globo-ingress.yml

kubectl get ingress
-- create-secrets 
kubectl delete secret globoconn-secrets
kubectl create secret generic globoconn-secrets --from-literal=ConnectionStrings__IS4DbConnection="Server=globodb-service,1434;Database=GlobomanticsIdSrv;User Id=sa;Password=yourStrong(!)Password;MultipleActiveResultSets=true;" --from-literal=ConnectionStrings__GlobomanticsDb="Server=globodb-service,1434;Database=Globomantics;User Id=globo_dbuser;Password=SqlonLinux?!;MultipleActiveResultSets=true;"

kubectl apply -f k8s/globois4.configmap.yml
kubectl apply -f k8s/globois4.yml


-- 
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout k8s/id-local.key -out k8s/id-local.crt -config k8s/id-local.conf -passin pass:YourStrongPassword
openssl pkcs12 -export -out k8s/id-local.pfx -inkey k8s/id-local.key -in k8s/id-local.crt

-- create-secrets 
kubectl delete secret idlocal-tls
kubectl create secret tls idlocal-tls --key="k8s/id-local.key" --cert="k8s/id-local.crt"

kubectl delete service globomail-service

kubectl scale deployment globomantics-identity --replicas=2